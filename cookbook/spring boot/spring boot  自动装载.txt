#官方文档URL
https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-locating-the-main-class

#. main application class的定位 
   官方建议main application 在其他class的上层package.
   <推测> spring有可能会依据package目录进行一些递归扫描bean
   
# class的配置方式

  从官方描述来看，还是推荐使用java注解的方式定义配置
  
  > 不过注解方式定义配置有一定的局限性， 修改配置需要重新进行文件编译， 这一点应该需要得到衡量。
  
# @Configuration 
  我们没有必要将所有的配置放入在一个@configuration下面，组合配置的方式可以选择一下两种
  1. @import 注解导入
  2. @componentScan 指定扫描路径
 
#.导入XML的配置方式， 当然官方还是强烈你别不要这么干， 还是推荐使用@configuration
  @ImportResource
  
#. 自动装配
   这是一种基于你的classpath路径JAR LIST ,然后提供针对这些JAR的默认配置，这样就可以达到快速使用的效果。当然也为配置提供了一种拔插处理方式
   > 当你不需要某一个jar功能的时候，移除JAR的时候 ，配置就可以自动的取消。
   
   在之前的方案中，以前spring 的通配符配置方式其实也可以达到类似的效果，而且不修改JAVA代码，其实个人觉得还是挺好的
   
   
   开启自动装配特性，二者选其一
   
   1.@EnableAutoConfiguration 
   2.@SpringBootApplication 
   
#. 自动装配目标
   
   > 逐步替换
   > 定制自己JAR ,自动装配扩展，如何定义自己的功能包对应的自动装配
   
#. 自动装配定制 
   如果你想排除一些自动装配选项，可以使用如下范例
   1. @SpringBootApplication(exclude = { HibernateJpaAutoConfiguration.class, FreeMarkerAutoConfiguration.class })
   2. 使用spring的配置文件选项 > spring.autoconfigure.exclude

#. Spring Bean定义和依赖注入
   @ComponentScan 
   1. 如果你的入口在class的root package, 非常好， 你啥产生也不用加，自动扫描子包。
   
   构造器注入
   1、如果在一个spring bean的构造器中声明一个参数， 那么类的成员变量可以忽略@autowired注释
   
#. 使用springBootApplication注解
   这个注解将会开启三个特性
   1. EnableAutoConfiguration
   2. ComponentScan
   3. Configuration 
   

   
   
   
   
   